<?xml version='1.0'?>
<package author="Florian Courgey (fcourgey)" buildDate="2022-01-24 08:58:51.756Z"
         buildNumber="8937" buildVersion="6.7" img="xtk:installedPackage.png" label="Unofficial ACC - ACX Database Usage"
         name="acx-databaseusage" namespace="unofficialacc" vendor="">
  <entities schema="xtk:option">
    <option name="acxCustomerName" stringValue="Unofficial ACC">
      <desc>Customer name to be used on by the databaseUsage.jssp. Recommended that you use an abbreviation when possible.</desc>
    </option>
    <option name="acxInstanceName" stringValue="Preprod"/>
    <option name="acxSFTPUserName" stringValue="sftp_user"/>
    <option dataType="3" name="acxTotalSpaceMainDB">
      <desc>Hardcoded value of the main Campaign DB Drive size in MB.
This is used by the databaseUsage.jssp.
This value should be the space dedicated (used and available) for the Adobe Campaign database.</desc>
    </option>
    <option name="acxDatabaseUsageReportVersion" stringValue="2.2">
      <desc>Keeping track of package version installed</desc>
    </option>
  </entities>
  <entities schema="xtk:jssp">
    <jssp entitySchema="xtk:jssp" img="xtk:javascript.png" label="databaseUsage.jssp"
          name="databaseUsage.jssp" namespace="acx">

      <data><![CDATA[<%@ page import="/nl/core/shared/nl.js" %><%
  NL.server().reset().require('/xtk/shared/xtk.js')
    .require('/nl/core/jsspcontext.js');
  NL.require('/nl/core/shared/js.js');
  NL.require('/nl/core/shared/xtk.js');  
  
  var jsspContext = new NL.JSSPContext(request)
  if( !jsspContext.checkAuthentication(response) )
    return;
  
  loadLibrary("acx:core.js");
  acxjs.dispose(acxjs, "acx:database.js", "acxjs.database")
  
  if ( request.getParameter("mode") == "api" ) {
    // 
    // the client is performing a call to the public API
    // 
    acxjs.require("acx:net.js");
    acxjs.net.remoteCall(request, response, document);
    return;
  }
  
acxjs.require("acx:net.js");
acxjs.net.remoteCall(request, response, document);
  
  
  loadLibrary("xtk:common.js");
  Format.setLanguage("en-us");
  if ( NL.JSSPContext == undefined ) {
    // ## compatibility with build 7825
    NL.JSSPContext = JSSPContext;
  }
  // headers to disable cache
  response.addHeader("Pragma", "no-cache")
  response.addHeader("Cache-Control", "no-cache");
  response.addHeader("Expires", new Date().toGMTString());
  response.setContentType("text/html;charset=utf-8")
  var jsspContext = new NL.JSSPContext(request)
  var securityToken = request.getParameter("__securitytoken");
  var object = request.getParameter("object");
  if ( object == undefined || object == '') object = "all";
  var states = {};
  // totalDriveSpace is in MB
  try{
    var totalDriveSpace = getOption('acxTotalSpaceMainDB');
    } 
    catch(e){
    var totalDriveSpace = 0;
    }
  //determine if the database type is SQL Server or PostGres
  
  var databaseType = Application.getDBMSType();
  
  var usedSpace = sqlGetInt("SELECT SUM(size_mbytes) FROM acxuvspace");
  if ( object == "all" ) {
   if (databaseType == "mssql"){ 
    var tables = sqlSelect("workflow,@tablename:string,@row_count:int64,@size:int64",
                           "SELECT TOP 100 tablename, sum(row_count), sum(size_mbytes) FROM acxuvspace GROUP BY tablename ORDER BY 3 DESC, 2 DESC ;");
    var totalSpace = sqlGetInt("SELECT SUM(size_mbytes) FROM acxuvspace");
   } else if (databaseType == "postgresql"){
     
     var tablesSizeAll = sqlSelect("workflow,@tablename:string,@sizeMB_all:int64,@sizeMB_data_only:int64,@sizeMB_idx_only:int64,@row_count:int64",
                           "SELECT tablename, sizeMB_all, sizeMB_data_only, sizeMB_idx_only, rows FROM aggruvspace order by 2 desc LIMIT 100;");                           
     var tablesSizeTbl = sqlSelect("workflow,@tablename:string,@sizeMB_all:int64,@sizeMB_data_only:int64,@sizeMB_idx_only:int64,@row_count:int64",
                           "SELECT tablename, sizeMB_all, sizeMB_data_only, sizeMB_idx_only, rows FROM aggruvspace order by 3 desc LIMIT 100;");                           
     //Not providing a good result so disabled at the moment (Florian/2016-07-06)
     //var tablesSizeIdx = sqlSelect("workflow,@tablename:string,@sizeMB_all:int64,@sizeMB_data_only:int64,@sizeMB_idx_only:int64,@row_count:int64",
     //                      "SELECT tablename, sizeMB_all, sizeMB_data_only, sizeMB_idx_only, rows FROM aggruvspace order by 4 desc LIMIT 100;");                           
                           
    var totalSpace = sqlGetInt("SELECT SUM(size_mbytes) FROM acxuvspace");
   }
  } else if ( object == "workflow" ) {
   if (databaseType == "mssql"){   
     var tables = sqlSelect("workflow,@workflow:string,@label:string,@internalName:string,@state:short,@failed:boolean,@lastProcess:datetime,@nextProcessing:datetime,@keepResult:byte,@campaignLabel:string,@campaignInternalName:string,@size:int64,@count:long", 
                           "SELECT x.workflow, w.sLabel, w.sInternalName, w.iState, w.iFailed, w.tsProcess, w.tsNextProcessing, CASE WHEN w.mData LIKE '%keepResult=\"true\"%' THEN 1 ELSE 0 END as keepResult, O.sLabel, O.sInternalName, x.iSize, x.iCount FROM(  SELECT substring(tablename, 1, case when CHARINDEX( '_',tablename) > 0 then CHARINDEX ( '_',tablename) - 1 else len(tablename) end) as workflow, CAST(sum(size_mbytes) as bigint) as iSize, count(*) as iCount FROM acxuvspace  WHERE tablename like 'wkf%' GROUP BY substring(tablename, 1, case when CHARINDEX( '_',tablename) > 0 then CHARINDEX ( '_',tablename) - 1 else len(tablename) end) ) x JOIN XtkWorkflow w ON x.workflow = 'wkf' + CAST(w.iWorkflowId as varchar) JOIN NmsOperation O ON w.iOperationId = O.iOperationId ORDER BY x.iSize DESC;");
    } else if (databaseType == "postgresql"){
     var tables = sqlSelect("workflow,@workflow:string,@label:string,@internalName:string,@state:short,@failed:boolean,@lastProcess:datetime,@nextProcessing:datetime,@keepResult:byte,@campaignLabel:string,@campaignInternalName:string,@size:int64,@count:long", 
                           "SELECT x.workflow, w.sLabel, w.sInternalName, w.iState, w.iFailed, w.tsProcess, w.tsNextProcessing, CASE WHEN w.mData LIKE '%keepResult=\"true\"%' THEN 1 ELSE 0 END as keepResult, O.sLabel, O.sInternalName, x.iSize, x.iCount FROM (SELECT substr(tablename, 1, case when strpos(tablename, E'_') > 0 then strpos(tablename, E'_') - 1 else char_length(tablename) end) as workflow, CAST(sum(size_mbytes) as bigint) as iSize, count(*) as iCount FROM acxuvspace WHERE tablename like 'wkf%' GROUP BY 1 ORDER BY 2 DESC) x JOIN XtkWorkflow w ON x.workflow = 'wkf' || w.iWorkflowId JOIN NmsOperation O ON w.iOperationId = O.iOperationId ORDER BY x.iSize DESC;");
    }
    var wkfStateSpace = new Array();
    var wkfStateSpacePretty = new Array();
    var wkfStateLabels = new Array();
    var stateValues = new Array();
    var wkfEnum = application.getSchema("xtk:workflow").enumerations;
    for each ( var e in wkfEnum ) {
      if ( e.name == 'xtk:workflow:workflowState' ) {
        for each ( var val in e.values ) {
          wkfStateLabels[val.value] = val.label;
          wkfStateSpace[val.value] = 0;
          stateValues.push(val.value);
        }
      }
    }
    for each ( var workflow in tables ) {
      if( stateValues.indexOf( workflow.@state.toString() ) >-1 )
        wkfStateSpace[parseInt(workflow.@state)] += parseInt(workflow.@size);
    }
    for ( i = 0; i < stateValues.length; i++) {
      j = parseInt(stateValues[i]);
      if (wkfStateSpace[j] > 0) {
        var size_gb = (parseInt(wkfStateSpace[j], 10)/1024).toFixed(2);
        size_gb > 0 ? wkfStateSpacePretty[j] = (size_gb+" GB") : wkfStateSpacePretty[j] = (wkfStateSpace[j]+" MB");
      }
    }
    var totalSpace = sqlGetInt("SELECT SUM(size_mbytes) FROM acxuvspace WHERE tablename LIKE 'wkf%'");
  } else if ( object == "list" ) {
     if (databaseType == "mssql"){ 
      var tables = sqlSelect("list,@listLabel:string,@listName:string,@listId:long,@created:datetime,@size:long",
                           "SELECT TOP 100 l.sLabel, l.sName, l.iGroupId, l.tsCreated, x.size FROM (SELECT tablename, sum(size_mbytes) as size FROM acxuvspace WHERE tablename LIKE 'grp%' group by tablename) x JOIN NmsGroup l ON (x.tablename = 'grp' + CAST(l.igroupid as varchar) ) WHERE l.sName NOT LIKE 'agg%' ORDER BY x.size DESC ;");
    } else if (databaseType == "postgresql"){
      var tables = sqlSelect("list,@listLabel:string,@listName:string,@listId:long,@created:datetime,@size:long",
                           "SELECT l.sLabel, l.sName, l.iGroupId, l.tsCreated, x.size FROM (SELECT tablename, sum(size_mbytes) as size FROM acxuvspace WHERE tablename LIKE 'grp%' group by tablename) x JOIN NmsGroup l ON (x.tablename = 'grp' || l.igroupid) WHERE l.sName NOT LIKE 'agg%' ORDER BY x.size DESC LIMIT 100;");
      
    }
    var totalSpace = sqlGetInt("SELECT SUM(size_mbytes) FROM acxuvspace WHERE tablename LIKE 'grp%'");
  } else if ( object == "wkdlv" ) {
     if (databaseType == "mssql"){ 
      var tables = sqlSelect("delivery,@deliveryId:integer,@deliveryLabel:string,@deliveryInternalName:string,@deliveryState:integer,@deliveryLastModified:datetime,@size:int64",
                           "SELECT d.iDeliveryId, d.sLabel, d.sInternalName, d.iState, d.tsLastModified, x.size FROM (SELECT substring(tablename , CHARINDEX('_',tablename) + 1,LEN(tablename))  as deliveryId, CAST(sum(size_mbytes) as bigint) as size FROM acxuvspace a WHERE tablename LIKE 'wkdlv%' and UPPER(tablename) not like '%[_][A-Z]%' GROUP BY substring(tablename , CHARINDEX('_',tablename) + 1,LEN(tablename)) HAVING sum(size_mbytes) > 0 ) x JOIN NmsDelivery d ON (x.deliveryId = d.iDeliveryId) WHERE d.tsLastModified > DATEADD(Month, -1, getdate());");
      } else if (databaseType == "postgresql"){
      var tables = sqlSelect("delivery,@deliveryId:int64,@deliveryLabel:string,@deliveryInternalName:string,@deliveryState:integer,@deliveryLastModified:datetime,@size:int64",
                           "SELECT d.iDeliveryId, d.sLabel, d.sInternalName, d.iState, d.tsLastModified, x.size FROM (SELECT substring(tablename from 'wkdlv\_([0-9]+)')::BIGINT as deliveryId, CAST(sum(size_mbytes) as bigint) as size FROM acxuvspace WHERE tablename LIKE 'wkdlv%' GROUP BY deliveryId HAVING sum(size_mbytes) > 0 ORDER BY size DESC) x JOIN NmsDelivery d ON (x.deliveryId = d.iDeliveryId) WHERE d.tsLastModified < DaysAgo(30);");
    }
    var totalSpace = sqlGetInt("SELECT SUM(size_mbytes) FROM acxuvspace WHERE tablename LIKE 'wkdlv%'");
    
    var enumerations = application.getSchema("nms:delivery").enumerations;
    for each ( var e in enumerations ) {
      if ( e.name == 'nms:delivery:deliveryState' ) {
        for each ( var val in e.values ) {
          states[val.value] = val.label;
        }
      }
    }
  } else if ( object == "sftp" ) {
    document.write('SFTP');
    document.write('databaseType'+databaseType);
    if (databaseType == "mssql") {
       usedSpace = 0;
    } else if (databaseType == "postgresql"){
      var sftpIsConfigured = true;
      //Try AWS structure for SFTP
      try {
          document.write('AWS test');
          var totalSpace = parseInt(execCommand('du -s --exclude=.ssh /sftp/' + getOption('acxSFTPUserName'), true)[1].split("\t")[0], 10)/1024;
          totalDriveSpace = parseInt(execCommand('df -k | tail -1 | awk \'{print $4}\'',true)[1])/1024;
          usedSpace = 0;
          // The totalDriveSpace is actually the free space for SFTP, so the var usedSpace has to be 0 for the calculation of free space.
        } catch(e) {
          document.write('AWS fail');
          var totalSpace = 0;
          totalDriveSpace = 0;
          usedSpace = 0;
          sftpIsConfigured = false;          
        }
      //Didn't work? Maybe legacy system
      document.write('sftpIsConfigured'+sftpIsConfigured);
      if(!sftpIsConfigured){
        try{
          document.write('Legacy test');
          var totalSpace = parseInt(execCommand('du -s --exclude=.ssh /home/customers', true)[1].split("\t")[0], 10)/1024;
          totalDriveSpace = parseInt(execCommand('df -k | tail -1 | awk \'{print $4}\'',true)[1])/1024;
        } catch(e){
          document.write('legacy fail');
          var totalSpace = 0;
          totalDriveSpace = 0;
          usedSpace = 0;        
          sftpIsConfigured = false;
        }
      }
    }
  }  
  
  var maxLabelLength = 30;
  
  //Instance Name
  var instanceName = ' | ' + getOption('acxInstanceName');
  
  /* 
    Enhancements:
    - refresh table after deleting a list
    - create a snapshot daily
  */
%><!DOCTYPE html>
<html lang="en">
  <head>
    <title>Workflow Space Usage</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">
    <style>
      .highlight {
        background-color: #08C;
        border-radius: 3px;
        color: white;
      }
      
      span {
        padding: 2px;
        white-space: nowrap;
      }
      
      body { 
        padding-top: 50px; 
      }
      
      .popover { 
        max-width: 600px; 
        width: 250px;
      }
    </style>
    <script>
      function addCommas(nStr) {
        nStr += '';
        x = nStr.split('.');
        x1 = x[0];
        x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
          x1 = x1.replace(rgx, '$1' + ',' + '$2');
        }
        return x1 + x2;
      }
          
      // Takes in the total space as an unformatted string in MB
      // If the value in GB is 0.00, it returns the value in MB
      function formatGB(nStr) {
        var size_gb = (parseInt(nStr, 10)/1024).toFixed(2);
        return size_gb > 0 ? addCommas(size_gb)+" GB" : addCommas(parseInt(nStr, 10))+" MB";
      } 
      
      function tabs(n) {
        var s = "";
        for ( var i=0; i<n; i++ ) {
          s += "--\t";
        }
        return s;
      }
    </script>
  </head>
  <body>
    <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
      <div class="navbar-inner">
        <a class="navbar-brand" href="#"><%= getOption('acxCustomerName') %> <%= instanceName %> </a>
        <ul class="nav navbar-nav navbar-left">
          <li <%= object == "all" ? 'class=active' : '' %>><a href="databaseUsage.jssp?object=all&__securitytoken=<%=encodeURI(securityToken) %>">All Tables</a></li>
          <li <%= object == "workflow" ? 'class=active' : '' %>><a href="databaseUsage.jssp?object=workflow&__securitytoken=<%=encodeURI(securityToken) %>">Workflows</a></li>
          <li <%= object == "list" ? 'class=active' : '' %>><a href="databaseUsage.jssp?object=list&__securitytoken=<%=encodeURI(securityToken) %>">Lists</a></li>
          <li <%= object == "wkdlv" ? 'class=active' : '' %>><a href="databaseUsage.jssp?object=wkdlv&__securitytoken=<%=encodeURI(securityToken) %>">Deliveries</a></li>
          <% if (databaseType == "postgresql"){ %>
             <li <%= object == "sftp" ? 'class=active' : '' %>><a href="databaseUsage.jssp?object=sftp&__securitytoken=<%=encodeURI(securityToken) %>">SFTP</a></li>
             <li <%= object == "bloat" ? 'class=active' : '' %>><a href="databaseUsage.jssp?object=bloat&__securitytoken=<%=encodeURI(securityToken) %>">Bloat</a></li>
             <li <%= object == "lock" ? 'class=active' : '' %>><a href="databaseUsage.jssp?object=lock&__securitytoken=<%=encodeURI(securityToken) %>">Lock</a></li>
          <%}%>
        </ul>
        
        <ul class="nav navbar-nav navbar-right">
          <li><a id="help" title="Help" class="btn btn-inverse">Help</a></li>
          <% if ( object == "all" ) { %>
            <div id="help-content" style="display: none;">
              <ul>
                <li>Top 100 largest tables</li>
                <li>The total database space has to be defined manually in an Adobe Campaign 'Option' in order to provide an estimation of the available space</li> 
            </div>
          <% } else if ( object == "workflow" ) { %>
            <div id="help-content" style="display: none;width: 100px;">
              <ul>
                <li>Rows highlighted in yellow haven't been processed in 30 days</li>
                <li>The <span class="label label-primary">Clean</span> button will stop the workflow and delete all temporary tables</li>
              </ul>
            </div>
          <% } else if ( object == "list" ) { %>
            <div id="help-content" style="display: none;width: 100px;">
              The <span class="label label-primary">Delete</span> button will mark the list to be deleted with the nightly clean-up
            </div>
          <% } else if ( object == "wkdlv" ) { %>
            <div id="help-content" style="display: none;width: 100px;">
              The <span class="label label-primary">Clean</span> button will stop the delivery, removing any temporary tables.  Only deliveries older than 30 days are displayed.
            </div>
          <% } else if ( object == "sftp" ) { %>
            <div id="help-content" style="display: none;width: 100px;">
              List of SFTP Directories and their size.
            </div>
          <% } else if ( object == "bloat" ) { %>
            <div id="help-content" style="display: none;width: 100px;">
              List showing table bloat, the space that can be reclaimed by vaccum and/or reindexing.
            </div>
          <% } else if ( object == "lock" ) { %>
            <div id="help-content" style="display: none;width: 100px;">
              List showing what locks are granted and what processes are waiting for locks to be acquired.
            </div>
          <% } %>          
          <li><a id="total" title="Usage Breakdown" class="btn btn-inverse"><script>document.write(formatGB(<%= totalSpace %>))</script> used <% if ( totalDriveSpace > 0 ) { %>(<script>document.write(formatGB(<%= totalDriveSpace - usedSpace %>))</script> free)<% }else{ %>in the DB<%}%></a></li>
          <% if ( object == "workflow" ) { %>
            <div id="total-content" style="display: none;width: 100px;">
              <ul>
                <tr><strong>Space used per state:</strong></tr>
                <% for ( i = 0; i < stateValues.length; i++) {
                j = parseInt(stateValues[i]);
                if (wkfStateSpace[j] > 0) {
                  %><li>
                    <td><span><%= wkfStateLabels[j] %>: </span></td>
                    <td style="text-align:right;"><span><%= wkfStateSpacePretty[j] %></span></td>
                  </li>
                <% }
                } %>
              </ul>
            </div>
          <% } %>
          <% if(getOption('acxDatabaseUsageReportVersion') != null){ %><li><a class="btn btn-inverse">Version <%= getOption('acxDatabaseUsageReportVersion') %></a></li><% } %>
        </ul>
      </div>
    </nav>
    <br>
<div class="col-md-8 col-md-offset-2">
  <div class="ac-alert alert alert-warning">
    <button type="button" data-dismiss="alert" class="close ac-close"><span aria-hidden="true">&times;</span></button>
    <span class="glyphicon glyphicon-info-sign"></span>
    <strong>Wait!</strong> All figures presented here are approximate and for informational purposes only.
  </div>
</div>
    <% if ( object == "all" ) { %>
    
      <% if(databaseType == "postgresql") {%>
      
        <div class="container">
        
          <div class="panel panel-default" style="clear:both;">
            <div class="panel-heading">Ordering</div>
            <div class="panel-body">
              <label class="radio-inline lbl-all-by-size"><input id="input-all-order-all" type="radio" name="all-order" value="all" checked="true">Order by size (all)</label>
              <label class="radio-inline lbl-all-by-size"><input id="input-all-order-table" type="radio" name="all-order" value="table">Order by table size</label>
              <!--<label class="radio-inline lbl-all-by-size"><input id="input-all-order-index" type="radio" name="all-order" value="index">Order by index size</label>-->
            </div>
          </div>
  
          <table class="table all-by-size" style="width:400px;margin:auto;" id="all-by-size-all">
            <thead>
              <tr>
                <th>Table Name</th>
                <th style="text-align:right;white-space:nowrap;">Row Count</th>
                <th style="text-align:right;white-space:nowrap;">Size (All)</th>
                <th style="text-align:right;white-space:nowrap;">Table Size</th>
                <th style="text-align:right;white-space:nowrap;">Index Size</th>
              </tr>
            </thead>
            <tbody>
              <% for each ( var w in tablesSizeAll.workflow ) { %>
                <tr>
                  <td><%= w.@tablename %></td>
                  <td style="text-align:right;"><script>document.write(addCommas(<%= w.@row_count %>))</script></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= w.@sizeMB_all %>))</script></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= w.@sizeMB_data_only %>))</script></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= w.@sizeMB_idx_only %>))</script></td>
                </tr>
              <% } %>
            </tbody>
          </table>
  
          <table class="table all-by-size hidden" style="width:400px;margin:auto;" id="all-by-size-table">
            <thead>
              <tr>
                <th>Table Name</th>
                <th style="text-align:right;white-space:nowrap;">Row Count</th>
                <th style="text-align:right;white-space:nowrap;">Size All</th>
                <th style="text-align:right;white-space:nowrap;">Size Data</th>
                <th style="text-align:right;white-space:nowrap;">Size Index</th>
              </tr>
            </thead>
            <tbody>
              <% for each ( var w in tablesSizeTbl.workflow ) { %>
                <tr>
                  <td><%= w.@tablename %></td>
                  <td style="text-align:right;"><script>document.write(addCommas(<%= w.@row_count %>))</script></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= w.@sizeMB_all %>))</script></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= w.@sizeMB_data_only %>))</script></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= w.@sizeMB_idx_only %>))</script></td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      <% } %>
    
      <% if(databaseType == "mssql") {%>
        <div class="container">
          <table class="table all-by-size" style="width:400px;margin:auto;" id="all-by-size-all">
            <thead>
              <tr>
                <th>Table Name</th>
                <th style="text-align:right;white-space:nowrap;">Row Count</th>
                <th style="text-align:right;white-space:nowrap;">Size</th>
              </tr>
            </thead>
            <tbody>
              <% for each ( var w in tables.workflow ) { %>
                <tr>
                  <td><%= w.@tablename %></td>
                  <td style="text-align:right;"><script>document.write(addCommas(<%= w.@row_count %>))</script></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= w.@size %>))</script></td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      <% } %>
    <% } %>
    <% if ( object == "workflow" ) { %>
      <div class="container">
        <div id="confirm-workflow-clean" class="modal fade">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-body">
                <p>Are you sure you want to delete all temporary tables for the workflow: <span id="wfName">&nbsp;</span>?</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="clean-workflow">Clean</button>
              </div>
            </div><!-- /.modal-content -->
          </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
        
        <div class="container">
        
          <div class="panel panel-default" style="clear:both;">
            <div class="panel-heading">Filtering</div>
            <div class="panel-body">
              <div class="checkbox">
                <label><input id="wkf-chb-keepResult" type="checkbox" value="">Display "Keep Results" ON only</label>
              </div>
            </div>
          </div>        
          <!-- Not active at the moment, action to be added -->
          <!--<button id="wkf-btn-action-removeKeepResult" type="button" class="btn btn-default">Remove keep result</button>-->
        
          <table id="table-wkf" class="table">
            <thead>
              <tr>
                <th><!--<input id="wkf-chb-all" class="chb-global" type="checkbox"/>--></th>
                <th>Workflow Name</th>
                <th style="white-space:nowrap;">Last Processed</th>
                <th style="white-space:nowrap;">Next Processing</th>
                <th>Campaign</th>
                <th style="max-width: 75px;">Temp Tables</th>
                <th style="text-align:right;white-space:nowrap;">Size (GB)</th>
                <th>&nbsp;</th>
              </tr>
            </thead>
            <tbody>
              <% for each ( var w in tables.workflow ) {
                  // calculate if the workflow last executed more than X days ago
                  var maxElapsedTime = 30*24*60*60*1000;
                  var now = new Date().getTime();
                  var lastProcessDate = (new Date(w.@lastProcess.toString().replace(/-/g, "/").substring(0,19))).getTime();
                  var nextProcessing = (new Date(w.@nextProcessing.toString().replace(/-/g, "/").substring(0,19))).getTime();
                  w.@tooLong = now - lastProcessDate > maxElapsedTime ? true : false;
                  var class="workflow";
                  
                  if(w.@tooLong == true)
                    class += " warning";
                    
                  if(w.@keepResult == 1)
                    class += " keepResult";
              %>
              <tr id="<%= NL.XML.escapeAttribute(w.@internalName) %>" class="<%= class %>">
                  <td>
                    <% if( [0,13,20].indexOf( parseInt(w.@state) ) >-1 ){ %>
                      <!--<input id="wkf-chb-<%== w.@internalName %>" class="chb-workflow" type="checkbox"/>-->
                    <% } %>
                  </td>
                  <td style="max-width: 250px;"><span><%= w.@label.toString().length > maxLabelLength ? w.@label.toString().substring(0,maxLabelLength) + "..." : w.@label %><br/>(<%= w.@internalName %>)<br></span>
                  <% if ( w.@keepResult == 1 ) { %><span class="label label-warning">Keep Results</span><%} %>
                  <% if ( w.@failed == 1 ) { %><span class="label label-danger">Failed</span>
                  <% } else if ( w.@state == 13 ){ %><span class="label label-warning">Paused</span>
                  <% } else { %><span class="label label-success"><%= wkfStateLabels[parseInt(w.@state)]%></span><% } %>
                  </td>
                  <td style="text-align:center;"><%= formatDate(w.@lastProcess, '%4Y-%2M-%2D %2H:%2N') %></td>
                  <td style="text-align:center;"><%= formatDate(w.@nextProcessing, '%4Y-%2M-%2D %2H:%2N') %></td>
                  <td style="max-width: 150px;"><span><%= w.@campaignLabel.toString().length > maxLabelLength ? w.@campaignLabel.toString().substring(0,maxLabelLength) + "..." : w.@campaignLabel %> <br>(<%= w.@campaignInternalName %>)</span></td>
                  <td style="text-align:right;"><script>document.write(<%= w.@count %>)</script></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= w.@size %>))</script></td>
                  <td style="width: 55px;">
                  <% if( [0,13,20].indexOf( parseInt(w.@state) ) >-1 ){ %>
                    <button data-toggle="modal" data-label="<%== w.@label %>" data-bind='{"label": "<%= w.@label %>", "workflow": "<%== w.@workflow  %>", "internalName": "<%== w.@internalName %>"}' class="confirm-delete btn btn-primary" href="#confirm-workflow-clean">Clean</button>
                  <% } else { %>
                    <button class="btn btn-default disabled">Clean</button>
                  <% } %>
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    <% } %>
    
    <% if ( object == "list" ) { %> 
      <div class="container">
        <div id="confirm-delete-list" class="modal fade">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-body">
                <p>Are you sure you want to delete the list: <span id="listName">&nbsp;</span>?</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="delete-list">Delete</button>
              </div>
            </div><!-- /.modal-content -->
          </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
        
        <div class="container">
          <table class="table">
            <thead>
              <tr>
                <th>List</th>
                <th style="text-align:center;">Created</th>
                <th style="text-align:right;white-space:nowrap;">Size (GB)</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <% for each ( var w in tables.list ) { %>
                <tr id="<%== w.@listName %>">
                  <td><%= w.@listLabel.toString().length > maxLabelLength ? w.@listLabel.toString().substring(0,maxLabelLength) + "..." : w.@listLabel %> (<%= w.@listName %>)</td>
                  <td style="text-align:center;"><%= formatDate(w.@created, '%4Y-%2M-%2D') %></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= w.@size %>))</script></td>
                  <td style="text-align:right;"><button type="button" data-toggle="modal" data-label="<%= NL.XML.escapeAttribute(w.@listLabel) %>" data-bind='{"label": "<%= NL.JS.escape(w.@listLabel) %>", "listId": <%= NL.JS.escape(w.@listId) %>, "internalName": "<%= NL.JS.escape(w.@listName) %>"}' class="confirm-delete-list btn btn-primary" href="#confirm-delete-list">Delete</button>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    <% } %>
    
    
    <% if ( object == "wkdlv" ) { %>
      <div class="container">
        <div id="confirm-clean-delivery" class="modal fade">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-body">
                <p>Are you sure you want to delete all temporary tables for the delivery: <span id="deliveryName">&nbsp;</span>?</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="clean-delivery">Clean</button>
              </div>
            </div><!-- /.modal-content -->
          </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
          
        <div class="container">
          <table class="table">
            <thead>
              <tr>
                <th>Delivery</th>
                <th>State</th>
                <th>Last Modified</th>
                <th style="text-align:right;white-space:nowrap;">Size (GB)</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <% for each ( var d in tables.delivery ) { %>
                <tr id="<%== d.@deliveryInternalName %>">
                  <td><%= d.@deliveryLabel %> (<%= d.@deliveryInternalName %>)</td>
                  <td><%= states[d.@deliveryState] %></td>
                  <td><%= formatDate(d.@deliveryLastModified, '%4Y-%2M-%2D') %></td>
                  <td style="text-align:right;"><script>document.write(formatGB(<%= d.@size %>))</script></td>
                  <td style="text-align:right;"><button type="button" data-toggle="modal" data-label="<%== d.@deliveryLabel %>" data-bind='{"label": "<%= d.@deliveryLabel %>", "internalName": "<%= d.@deliveryInternalName %>", "deliveryId": <%= d.@deliveryId %> }' class="confirm-clean-delivery btn btn-primary" href="#confirm-clean-delivery">Clean</button>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    <% } %>
    
   
<!-- FTP failure -->
<% if ( object == "sftp" ) { %>
  <div class="container">
    <%
      var sftpIsConfigured = true;
      /*
      //Try AWS structure for SFTP
      try{
        var result = execCommand('du -s --exclude=.ssh /sftp/' + getOption('acxSFTPUserName') + '/incoming/*')[1].split('\n');
      }
      catch(e){
        sftpIsConfigured = false;
      }
      */
      //Didn't work? Maybe legacy system
      //if(!sftpIsConfigured){
        document.write('Legacy home customers');
        try{
          var result = execCommand('du -s --exclude=.ssh /home/customers/*')[1].split('\n');
        }
        catch(e){
          sftpIsConfigured = false;
        }
      //}
      var dirArray = new Array();
      for each ( var d in result ) {
        var size = parseInt(d.split('\t')[0], 10)/1024;
        var dir = d.split('\t')[1];
        if ( dir == undefined ) continue;
        dir = dir.substring(16 + getOption('acxSFTPUserName').length);
        
        dirArray.push({"size": size, "dir": dir});
        
        dirArray.sort(function(a, b) {
          return b.size - a.size;
        });
      }
    %>
    <% if (sftpIsConfigured) { %>
    <table class="table" id="sftp_table">
      <thead>
        <tr>
          <th>Size</th>
          <th>Folder</th>
        </tr>
      </thead>
      <tbody>
        <% for each ( var d in dirArray ) { %>
          <tr class="sftp_dir" id="<%= NL.XML.escapeAttribute(d.dir).replace(/\//g, '_') %>" data-bind='<%= NL.XML.escapeAttribute(d.dir) %>' data-level="0">
            <td><script>document.write(formatGB(<%= d.size %>))</script></td>
            <td><%= d.dir %></td>
          </tr>
        <% } %>
      </tbody>
    </table>
    <% } else { %>
    <div class="col-md-8 col-md-offset-2">
      <%if (databaseType == "mssql"){%>
      <div class="alert alert-danger">
        SFTP Reporting is supported currently only for Adobe hosted servers <strong>:(</strong>
      </div>
      <%} else if (databaseType == "postgresql"){ %>
      <div class="alert alert-danger">
        Oops, it looks like SFTP isn't configured right <strong>:(</strong>
      </div>      
      <%}%>
    </div>
    <% } %>
  </div>
<% } %>
<!-- OBJECT BLOAT -->
<% if ( object == "bloat" ) { %>
  <div class="container">
    <%
      var bloatTable = sqlSelect("bloat,@database:string,@schemaname:string,@tablename:string, @tbloat:double, @wastedbytes:int64, @iname:string, @ibloat:double, @wastedibytes:int64",
                             "SELECT database, schemaname, tablename, tbloat, wastedbytes, iname, ibloat, wastedibytes FROM pgbloat order by wastedbytes desc limit 100;");
      var bloatTableArray = new Array();
      for each(var bloat in bloatTable){
        bloatTableArray.push({"database": bloat.@database,
                         "schemaname": bloat.@schemaname,
                         "tablename": bloat.@tablename,
                         "tbloat": bloat.@tbloat,
                         "wastedbytes": bloat.@wastedbytes,
                         "iname": bloat.@iname,
                         "ibloat": bloat.@ibloat,
                         "wastedibytes": bloat.@wastedibytes
                        })
      }
      var bloatIndex = sqlSelect("bloat,@database:string,@schemaname:string,@tablename:string, @tbloat:long, @wastedbytes:int64, @iname:string, @ibloat:long, @wastedibytes:int64",
                             "SELECT database, schemaname, tablename, tbloat, wastedbytes, iname, ibloat, wastedibytes FROM pgbloat order by wastedibytes desc limit 100;");
      var bloatIndexArray = new Array();
      for each(var bloat in bloatIndex){
        bloatIndexArray.push({"database": bloat.@database,
                         "schemaname": bloat.@schemaname,
                         "tablename": bloat.@tablename,
                         "tbloat": bloat.@tbloat,
                         "wastedbytes": bloat.@wastedbytes,
                         "iname": bloat.@iname,
                         "ibloat": bloat.@ibloat,
                         "wastedibytes": bloat.@wastedibytes
                        })
      }
      
    %>
    <div class="panel panel-default" style="clear:both;">
    <div class="panel-heading">Ordering</div>
      <div class="panel-body">
        <label class="radio-inline"><input id="input-bloat-order-table" type="radio" name="bloat-order" value="table" checked="true">Order by table</label>
        <label class="radio-inline"><input id="input-bloat-order-index" type="radio" name="bloat-order" value="index">Order by index</label>
      </div>
    </div>
        
    <table class="table" id="bloat_table">
      <thead>
        <tr>
          <th>Database</th>
          <th>Schema name</th>
          <th>Table name</th>
          <th>Table bloat</th>
          <th>Wasted bytes</th>
          <th>Index name</th>
          <th>Index bloat</th>
          <th>Wasted index bytes</th>
        </tr>
      </thead>
      <tbody>
        <% for each (var b in bloatTableArray) { %>
          <tr class="bloat_tr">
            <td><%= b.database %></td>
            <td><%= b.schemaname %></td>
            <td><%= b.tablename %></td>
            <td><%= b.tbloat %></td>
            <td><%= b.wastedbytes %></td>
            <td><%= b.iname %></td>
            <td><%= b.ibloat %></td>
            <td><%= b.wastedibytes %></td>
          </tr>
        <% } %>
      </tbody>
    </table>
    <table class="table hidden" id="bloat_index">
      <thead>
        <tr>
          <th>Database</th>
          <th>Schema name</th>
          <th>Table name</th>
          <th>Table bloat</th>
          <th>Wasted bytes</th>
          <th>Index name</th>
          <th>Index bloat</th>
          <th>Wasted index bytes</th>
        </tr>
      </thead>
      <tbody>
        <% for each (var b in bloatIndexArray) { %>
          <tr class="bloat_tr">
            <td><%= b.database %></td>
            <td><%= b.schemaname %></td>
            <td><%= b.tablename %></td>
            <td><%= b.tbloat %></td>
            <td><%= b.wastedbytes %></td>
            <td><%= b.iname %></td>
            <td><%= b.ibloat %></td>
            <td><%= b.wastedibytes %></td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>  
<% } %>
<!-- OBJECT BLOAT -->
<!-- OBJECT LOCK -->
<% if ( object == "lock" ) { %>
  <div class="container">
    <%
      var locks = sqlSelect("lock,@blocked_pid:long,@blocked_user:string,@blocking_duration:long, @blocking_statement:string, @blocking_pid:long, @blocking_user:string, @blocked_statement:string, @blocked_duration:long",
                             "SELECT bl.pid AS blocked_pid,  a.usename AS blocked_user, now() - ka.query_start AS blocking_duration, kl.pid AS blocking_pid, ka.usename AS blocking_user, a.query AS blocked_statement, now() - a.query_start  AS blocked_duration FROM  pg_catalog.pg_locks bl JOIN pg_catalog.pg_stat_activity a  ON a.pid = bl.pid JOIN pg_catalog.pg_locks kl ON kl.transactionid = bl.transactionid AND kl.pid != bl.pid JOIN pg_catalog.pg_stat_activity ka ON ka.pid = kl.pid WHERE NOT bl.GRANTED;");
      var locksArray = new Array();
      for each(var lock in locks){
        locksArray.push({"blocked_pid": lock.@blocked_pid,
                         "blocked_user": lock.@blocked_user,
                         "blocking_statement": lock.@blocking_statement,
                         "blocking_duration": lock.@blocking_duration,
                         "blocking_pid": lock.@blocking_pid,
                         "blocking_user": lock.@blocking_user,
                         "blocked_statement": lock.@blocked_statement,
                         "blocked_duration": lock.@blocked_duration
                        })
      }
      
    %>
    
    <table class="table" id="bloat_table">
      <thead>
        <tr>
          <th>Blocked PID</th>
          <th>Blocked user</th>
          <th>Blocked statement</th>
          <th>Blocked duration</th>
          <th>Blocked statement</th>
          <th>Blocking PID</th>
          <th>Blocking user</th>
          <th>Blocking duration</th>
        </tr>
      </thead>
      <tbody>
        <% for each (var l in locksArray) { %>
          <tr class="lock_tr">
            <td><%= l.blocked_pid %></td>
            <td><%= l.blocked_user %></td>
            <td><%= l.blocked_statement %></td>
            <td><%= l.blocked_duration %></td>
            <td><%= l.blocked_statement %></td>
            <td><%= l.blocking_pid %></td>
            <td><%= l.blocking_user %></td>
            <td><%= l.blocking_duration %></td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>  
<% } %>
<!-- OBJECT LOCK -->    
    
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js"></script>
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
      <script>
        // Clean workflow code
        jQuery(document).on("click", ".confirm-delete", function(e){
            var workflow = jQuery(this).data('label');
            jQuery(".modal-body #wfName").text( workflow );
            jQuery("#clean-workflow").data('bind', jQuery(this).data('bind'));
          });
          
        jQuery("#clean-workflow").on("click", function(e){
          var data = jQuery(this).data('bind');
          
          data = $.extend(data, {
            library: "acx:database.js",
            object:  "acxjs.database.cleanup",
            method:  "cleanWorkflowTempTables"
          });
  
          jQuery("#confirm-workflow-clean").modal('hide');
  
          $.ajax({
            url: "/acx/databaseUsage.jssp?mode=api" + (document.__securitytoken ? "&__securitytoken="+EncodeUriComponent(document.__securitytoken):""),
            dataType: "jsonp",
            data: data,
            success: function( data ) {
              jQuery('#total').text( "Total usage: " + formatGB(data.totalSpace) );
              alert("'" + data.label + "' successfully cleaned");
              jQuery("#" + data.name).remove();
            },
            error: function( data ) {
              alert("Unable to delete workflow temporary tables");
            }
          });
        });
        
        // Delete List code      
        jQuery(document).on("click", ".confirm-delete-list", function(e){
          var list = jQuery(this).data('label');
          jQuery(".modal-body #listName").text( list );
          jQuery("#delete-list").data('bind', jQuery(this).data('bind'));
        });
        
        jQuery("#delete-list").on("click", function(e){
          var data = jQuery(this).data('bind');
          
          data = $.extend(data, {
            library: "acx:database.js",
            object:  "acxjs.database.cleanup",
            method:  "deleteList"
          });
  
          jQuery("#confirm-delete-list").modal('hide');
  
          $.ajax({
            url: "/acx/databaseUsage.jssp?mode=api" + (document.__securitytoken ? "&__securitytoken="+EncodeUriComponent(document.__securitytoken):""),
            dataType: "jsonp",
            data: data,
            success: function( data ) {
              jQuery('#total').text( "Total usage: " + formatGB(data.totalSpace) );
              alert("'" + data.label + "' successfully marked for deletion");
            },
            error: function( data ) {
              alert("Unable to delete list");
            }
          });
        });
  
        // Clean Delivery code
        jQuery(document).on("click", ".confirm-clean-delivery", function(e){
            var delivery = jQuery(this).data('label');
            jQuery(".modal-body #deliveryName").text( delivery );
            jQuery("#clean-delivery").data('bind', jQuery(this).data('bind'));
          });
          
        jQuery("#clean-delivery").on("click", function(e){
          var data = jQuery(this).data('bind');
          
          data = $.extend(data, {
            library: "acx:database.js",
            object:  "acxjs.database.cleanup",
            method:  "cleanDelivery"
          });
  
          jQuery("#confirm-clean-delivery").modal('hide');
  
          $.ajax({
            url: "/acx/databaseUsage.jssp?mode=api" + (document.__securitytoken ? "&__securitytoken="+EncodeUriComponent(document.__securitytoken):""),
            dataType: "jsonp",
            data: data,
            success: function( data ) {
              jQuery('#total').text( "Total usage: " + formatGB(data.totalSpace) );
              alert("'" + data.label + "' successfully cleaned");
              jQuery("#" + data.name).remove();
            },
            error: function( data ) {
              alert("Unable to clean delivery tables");
            }
          });
        });
        
        jQuery("#help").popover({ html: true, placement: "bottom", content: jQuery("#help-content").html() });
        <% if ( object == "workflow" ) { %>
          jQuery("#total").popover({ html: true, placement: "bottom", trigger: "hover", content: jQuery('#total-content').html() });
        <%}%>
        
        //All
        jQuery(".lbl-all-by-size").click(function(){
          jQuery(".all-by-size").addClass("hidden");
          
          if(jQuery("#input-all-order-all").is(':checked')){
            jQuery("#all-by-size-all").removeClass("hidden");
          }
          else if(jQuery("#input-all-order-table").is(':checked')){
            jQuery("#all-by-size-table").removeClass("hidden");
          }
          else if(jQuery("#input-all-order-index").is(':checked')){
            jQuery("#all-by-size-index").removeClass("hidden");
          }
          
        });
      
        //Bloat
        jQuery("#input-bloat-order-table").click(function(){
          jQuery("#bloat_index").addClass("hidden");
          jQuery("#bloat_table").removeClass("hidden");
        });
        jQuery("#input-bloat-order-index").click(function(){
          jQuery("#bloat_table").addClass("hidden");
          jQuery("#bloat_index").removeClass("hidden");
        });
        
        
        //In dev, not ready yet
        //---------------------------------------
        //Workflow
        jQuery(".chb-global").change(function(){
          if(jQuery(this).is(':checked')){
            jQuery("#table-wkf .chb-workflow").prop('checked', true);;
          }
          else{
            jQuery("#table-wkf .chb-workflow").prop('checked', false);;
          }
        });
        jQuery("#wkf-chb-keepResult").change(function(){
          if(jQuery(this).is(':checked')){
            jQuery('#table-wkf tr.workflow:not(.keepResult)').addClass("hidden");
          }
          else{
            jQuery('#table-wkf tr.workflow:not(.keepResult)').removeClass("hidden");
          }
        });
        
        jQuery("#wkf-btn-action-removeKeepResult").click(function(){
          //To be completed
        });
        //---------------------------------------
        
        
        // SFTP Code
        /*
         jQuery(document).on("click", ".sftp_dir", function(e){
          var data = {"dir": jQuery(this).data('bind'), "level": + jQuery(this).data('level') };
          data = $.extend(data, {
            library: "acx:database.js",
            object:  "acxjs.database.sftp",
            method:  "getSubDirectories"
          });
          
          $.ajax({
            url: "/acx/databaseUsage.jssp?mode=api" + (document.__securitytoken ? "&__securitytoken="+EncodeUriComponent(document.__securitytoken):""),
            dataType: "jsonp",
            data: data,
            success: function( data ) {
              var dirTR = data.dir.replace(/\//g, '_');
              for ( var i=0; i<data.subDirs.length-1; i++ ) {
                var size = data.subDirs[i].split('\t')[0];
                var subDir = data.subDirs[i].split('\t')[1].toString();
                var subDirId = subDir.replace(/\//g, '_');
                jQuery("#" + dirTR).after('<tr class="sftp_dir" id="' + NL.XML.escapeAttribute(subDirId) + '" data-bind="' + NL.XML.escapeAttribute(subDir) + '" data-level="' + NL.XML.escapeAttribute(data.level) + '"><td>' + NL.XML.escapeAttribute(size) + '</td><td>'+ NL.XML.escapeAttribute(tabs(data.level)) + NL.XML.escapeAttribute(subDir) + '</td></tr>');
              }
            },
            error: function( data ) {
              alert('error');
            }
          });
        });
        */
      </script>
  </body>
</html>]]></data>
    </jssp>
  </entities>
  <entities schema="xtk:javascript">
    <javascript entitySchema="xtk:javascript" img="xtk:javascript.png" label="core.js"
                name="core.js" namespace="acx">

      <data><![CDATA["use strict";
var acxjs = acxjs || (function() {
  var _loadedModules = {};
  
  return {
  
    /** Load a module if required
      * 
      * @module  name of the module to load.
      * @return the acxjs object. */
    require: function(module) {
    
      if ( !_loadedModules[module] ) {
        loadLibrary(module, false);
        this.registerModule(module);
      }
      
      return this;
    },
    
    /** Unload an object in a module.
      * 
      * After the call of this method, the garbage collector will be able
      * to free the memory used by this object. 
      * 
      * Also usefull during the developement of new object.
      * Because JAVASCRIPT object in the namespace acxjs are created using 
      * the syntax 'x || {}', if the object already exists in the JAVASCRIPT 
      * engine, it will never be 'reloaded' even if you modify its definition
      * in the source code. This methods allows to force the JAVASCRIPT engine 
      * to reload it.
      * 
      * @vendor     the root object of the namespace (usually nlps).
      * @module     the javascript entity where the oject is implemented.
      * @objectName the fully qualified name of the object.
      * 
      * @example     acxjs.dispose(acxjs, "acx:misc.js", "acxjs.misc") */
    dispose: function(vendor, module, objectName) {
      _loadedModules[module] = false;
      var parent = vendor;
      var parts = objectName.split(".");
      for (var i=1; i < parts.length-1; i++) {
        if ( parent[parts[i]] === undefined ) {
          // the object does not exist
          return;
        }
        parent = parent[parts[i]];
      }
            
      delete parent[parts[parts.length-1]];
    },
    
    /** Flag a module as loaded */
    registerModule: function(module) {
      _loadedModules[module] = true;
      acxjs.debug("Module %1 loaded", module);
    },
    
    /** Debug logging information */
    debug: function() {
      logVerbose(acxjs.substituteString(arguments[0], Array.prototype.slice.call(arguments, 0)));
    },
    
    /** Informative logging information */
    log: function() {
      logInfo(acxjs.substituteString(arguments[0], Array.prototype.slice.call(arguments, 0)));
    },
    
    /** Output a warning information */
    warn: function() {
      logWarning(acxjs.substituteString(arguments[0], Array.prototype.slice.call(arguments, 0)));
    },
    
    /** Output a warning information */
    error: function() {
      logError(acxjs.substituteString(arguments[0], Array.prototype.slice.call(arguments, 0)));
    },
    
    /** Subtitute parameters in a string.
      * 
      * @see acxjs.string.substitute(). */
    substituteString: function(format) {
    
      var args = arguments;
      if ( arguments.length === 1 ) {
        // nothing to substitute
        return format;
      }
      else if ( args.length === 2 && args[1] instanceof Array ) {
        args = args[1];
      }
    
      var argNumber, res = "";
      var p, parts = format.split(/(%[%0-9]+)/g);
      
      for (var i=0; i < parts.length; i++) {
        p = parts[i];
        if ( p.charAt(0) === "%" && p.charAt(1) !== "%" ) {
        
          argNumber = parseInt(p.substring(1), 10);
          if ( argNumber >= args.length ) {
            throw("Out of range during substitution of the string '" + format + "' using " + (args.length-1) + " parameter(s)");
          }
          else {
            res += args[argNumber];
          }
        }
        else {
          res += p;
        }
      }
      
      return res;
    },
      
  }
  
})();
acxjs.Exception = function(message) {
  this.message = "";
}
acxjs.Exception.prototype.toString = function() {
  return this.message.toString();
}
acxjs.string = acxjs.string || (function() {
  return {
  
    /** Subtitute parameters in a string.
      * 
      * The string to process including the place holders. Place holders 
      * are %1, %2, ..., %n. To display the character '%', use '%%'.
      * @example substitute("Hello %1", "World")=> "Hello World" */
    substitute: function() {
      return acxjs.substituteString(arguments[0], Array.prototype.slice.call(arguments, 0));
    },
    /** Returns an integer converted from a string.
      * 
      * @numString a string to convert into a number.
      * @return    if numString cannot be successfully parsed into an integer, 
      *            NaN (not a number) is returned. */
    parseInt: function(numString) {
      return parseInt(numString, 10);
    },
    
    
    /** Right-aligns the characters in 'string' by padding on the left with a 
      * specified padding character for a specified total length.
      *
      * @string       string to pad.
      * @totalWidth   the number of characters in the resulting string.
      * @paddingChar  a padding character (optional, if empty this method will 
      *               use a space).
      * @return a new string that is equivalent to 'string', but right-aligned 
      *         and padded on the left with as many paddingChar characters as
      *         needed to create a length of totalWidth. */
    padLeft: function(string, totalWidth, paddingChar) {
      var padding = "";
      if ( paddingChar === undefined ) {
        paddingChar = " ";
      }
      for (var i=totalWidth-string.toString().length; i > 0; i--) {
        padding += paddingChar;
      }
      
      return padding + string;
    },
    
    /** Removes whitespace from both ends of the string.
      * 
      * @string  string to trim.
      * @return  a new string stripped of whitespace from both ends. */
    trim: function(string) {
      if (!String.prototype.trim) {
        return String(string).replace(/^\s+|\s+$/g, '');
      }
      else {
        return String(string).trim();
      }
    },
    
    /** Returns a boolean value indicating whether a string is empty.
      * 
      * @string the string to test.
      * @return true if the string is undefined, null or empty. */
    isEmpty: function(string) {
      return string === undefined || string === null || string === "";
    },
        
  }
})();
acxjs.date = acxjs.date || (function() {
  return {
    /** Parse a date in the format used by Adobe Campaign in XML documents
      *
      * @string a string in the following format 1971-12-30 22:46:04.000Z
      * @return a JAVASCRIPT date object */
    fromXtk: function(string) {
    
      var m = date.toString().split(/(\d{4})-(\d{2})-(\d{2})(\s?(\d{0,2}):(\d{0,2}):(\d{0,2}))?\.?(\d{3})?/);
      var date = new Date(m[1], this.parseInt(m[2])-1, m[3], this.nvl(m[5], 0), this.nvl(m[6], 0), this.nvl(m[7], 0), this.nvl(m[8], 0));
      if ( m[9] === "Z" ) {
        date.setTime(date.getTime() - date.getTimezoneOffset() * 60000);
      }
      
      return date;
    },
    
    /** Parse a date in the format used by Adobe Campaign in XML documents
      *
      * @date   a JAVASCRIPT date object.
      * @return a string in the Adobe Campaign XML format: 1971-12-30 22:46:04.000Z */
    toXtk: function(date) {
    
      return (date == null) ? "" : acxjs.string.padLeft(date.getUTCFullYear(), 4, "0") 
        + "-" + acxjs.string.padLeft(date.getUTCMonth() + 1, 2, "0")
        + "-" + acxjs.string.padLeft(date.getUTCDate(), 2, "0")
        + " " + acxjs.string.padLeft(date.getUTCHours(), 2, "0")
        + ":" + acxjs.string.padLeft(date.getUTCMinutes(), 2, "0")
        + ":" + acxjs.string.padLeft(date.getUTCSeconds(), 2, "0")
        + "." + acxjs.string.padLeft(date.getUTCMilliseconds(), 3, "0")
        + "Z";
    },
    
  }
})();
acxjs.number = acxjs.number || (function() {
  var supportedLocales = {
    "en-us": { decimal: ".", thousand: "," },
    "fr-fr": { decimal: ",", thousand: " " }
  };
  var locale      = supportedLocales["en-us"];
  var regInteger  = /(\d)(?=(\d\d\d)+(?!\d))/g;
  
  return {
    /** Format a number as a string
      *
      * @n       the number to format.
      * @options formating options. can be undefined or an object with the 
      *          values for the supported options:
      *          - decimals: number of decimals to display.
      *          - prefix:   a string to use to prefix the result.
      *          - suffix:   a string to append a the end of the result.
      * @example format(1236.3, {decimals: 2})) => 1,236.30 (with en-us locale) */
    format: function(n, options) {
    
      var s = String(n).split(".");
      var i = s[0].replace(regInteger, "$1" + locale.thousand);
      if ( options !== undefined ) {
        if ( options.decimals !== undefined ) {
          s[1] = s[1] || "";
          var d = s[1].substring(0, options.decimals);
          if ( d.length < options.decimals ) {
            d += "0000000000".substring(0, options.decimals-d.length);
          }
          
          var r = i+locale.decimal+d;
          if ( options.prefix != undefined ) {
            r = options.prefix + r;
          }
          if ( options.suffix != undefined ) {
            r = r + options.suffix;
          }
          return r;
        }
      }
      
      return i + locale.decimal + s[1];
    }
  }
})();
function namespace(vendor, ns) {
  var parent  = vendor;
  var parts   = ns.split(".");
  for (var i=1; i < parts.length; i++) {
    
    if ( typeof parent[parts[i]] === "undefined" ) {
      parent[parts[i]] = {};
    }
    
    parent = parent[parts[i]];
  }
}
/** Simulate Adobe Campaign functions for non-Adobe Campaign environment */
if ( typeof logInfo === "undefined" ) {
  if ( typeof console === "undefined" ) {
    var console = { log: print, info: print, warn: print };
  }
  var logVerbose = function (text) {
    console.log(text);
  }
  var logInfo = function (text) {
    console.info(text);
  }
  var logWarning = function (text) {
    console.warn(text);
  }
  var logError = function (text) {
    throw (text);
  }
}]]></data>
    </javascript>
    <javascript entitySchema="xtk:javascript" img="xtk:javascript.png" label="database.js"
                name="database.js" namespace="acx">

      <data><![CDATA[namespace(acxjs, "acxjs.database");
acxjs.database.cleanup = acxjs.database.cleanup || (function() {
  return {
    // this object is public, it can be called using acxjs.net.remoteCall()
    access: "public",
    cleanWorkflowTempTables: function(parameters) {
      var databaseType = Application.getDBMSType();
      var workflow = parameters.workflow;
      var deleteList = <table />
      if ( workflow.indexOf('wkf') == 0 ) {
      
        var cnx = application.getConnection();
        var stmt;
        // get all tables in DB for this workflow and drop them
        if (databaseType == "postgresql"){
          stmt = cnx.query("SELECT tablename FROM pg_catalog.pg_tables WHERE tablename LIKE $(sz) || '%'", workflow)
        }
        else if (databaseType == "mssql") {
          stmt = cnx.query("SELECT TABLE_NAME FROM information_schema.table WHERE TABLE_NAME  LIKE $(sz) || '%'", workflow)
        }
        
        for each(var row in stmt) {
          sqlExec('DROP TABLE ' + NL.String.toIdentifier(row[0]) + ';');
        }
      
        // Stop the workflow
        xtk.workflow.Stop(parameters.internalName);
      }
      var totalSpace = sqlGetInt("SELECT SUM(size_mbytes) FROM acxuvspace WHERE tablename LIKE 'wkf%'");
      return {"name": parameters.internalName, "label": parameters.label, "totalSpace": totalSpace};
    },
    deleteList: function(parameters) {
      xtk.session.Write(<group id={parameters.listId} xtkschema="nms:group" _operation="delete"/>);
      var totalSpace = sqlGetInt("SELECT SUM(size_mbytes) FROM acxuvspace WHERE tablename LIKE 'grp%'");
      return {"name": parameters.internalName, "label": parameters.label, "totalSpace": totalSpace};
    },
    
    cleanDelivery: function(parameters) {
      nms.delivery.Stop(parameters.deliveryId);
      var totalSpace = sqlGetInt("SELECT SUM(size_mbytes) FROM acxuvspace WHERE tablename LIKE 'wkdlv%'");
      return {"name": parameters.internalName, "label": parameters.label, "totalSpace": totalSpace};
    }
  }
})();]]></data>
    </javascript>
    <javascript entitySchema="xtk:javascript" img="xtk:javascript.png" label="net.js"
                name="net.js" namespace="acx">

      <data><![CDATA[/** Provides the classes for implementing networking applications.
  *
  *
  *
  */
acxjs.net  = acxjs.net || (function() {
  return {
  
    /** Call any object in the namespace acxjs.
      * 
      * @request  a JSSP request object.
      * @response a JSSP response object.
      * @document a JSSP document object. */
    remoteCall: function (request, response, document) {
    
      try {
        var library   = request.getParameter("library");
        var object    = request.getParameter("object");
        var method    = request.getParameter("method");
        var callback  = request.getParameter("callback");
        
        if ( library == "" ) {
          logError("Missing parameter: library");
        }
        else if ( object == "" ) {
          logError("Missing parameter: object");
        }
              
        // load the library if necessary
        acxjs.require(library);
  
        var parent  = acxjs;
        var parts   = object.split(".");
        for (var i=1; i < parts.length; i++) {
        
          if ( typeof parent[parts[i]] === "undefined" ) {
            logError("Unable to find the object or namespace '" + parts[i] + "' in " + object);
          }
          
          parent = parent[parts[i]];
        }
  
        if ( parent.access != "public" ) {
          // this object is not public, it cannot 
          logError("Access denied to a non public object: " + object);
        }
        
        var res = parent[method].call(null, request.parameters);
        if ( typeof res === "object" ) {
          // convert the object to a string
          if ( !JSON ) {
            logLibrary("xtk:shared/json2.js");
          }
          
          res = JSON.stringify(res);
        }
        if ( callback ) {
          document.write(callback + "(" + ((res == undefined) ? "" : res)  + ")");
        }
        else if ( res != undefined ) {
          document.write(res);
        }
        else {
          document.write("{}");
        }
      }
      catch ( e ) {
        document.write(e);
        response.sendError(500);
      }
    }
  }
})();]]></data>
    </javascript>
    <javascript entitySchema="xtk:javascript" img="xtk:javascript.png" label="workflow.js"
                name="workflow.js" namespace="acx">

      <data><![CDATA[loadLibrary("xtk:common.js");
Format.setLanguage("en-us");
function Workflow()
{ 
  this.executionStartTime = (new Date()).getTime()
  this.verbose = false
}
Workflow.prototype.STR_PROLOG_SQL_TRACE      = "SQL: "
Workflow.prototype.STR_PROLOG_SQL_TRACE_NEXT = "SQL:... "
/** Update the description and number of records returned by a javascript activity.
  *
  * @nRecord value to use to update vars.recCount. */
Workflow.prototype.updateJSActivity = function(nRecord)
{
  vars.recCount     = nRecord
  vars.description  = Format.formatNumber(nRecord, 0).replace(/\,/g, " ") + ", " + Format.formatTimeSpan(((new Date()).getTime() - this.executionStartTime) / 1000);
}
/** Log a message if the verbose mode is enabled
  *
  * @msg text of the message to log. */
Workflow.prototype.logVerbose = function(msg)
{
  if ( this.verbose )
    logInfo(msg)
}
/** Exectute an SQL query and log it if necessary.
  * 
  * @sql    the SQL statement to execute.
  * @return the number of records updated or inserted in the a SQL command 
  *         UPDATE or INSERT.
  */
Workflow.prototype.toSQLType = function(type, length)
{
  if ( type == "long" )
    return "INTEGER"
  else if ( type == "int64" )
    return "BIGINT"
  else if ( type == "short" )
    return "SMALLINT"
  else if ( type == "byte"  ||  type == "boolean" )
    return "NUMERIC(3)"
  else if ( type == "float" )
    return "REAL"
  else if ( type == "double"  ||  type == "timespan" )
    return "DOUBLE PECISION"
  else if ( type == "datetime" )
    return "TIMESTAMPTZ"
  else if ( type == "date" )
    return "DATE"
  else if ( type == "time" )
    return "TIME"
  else if ( type == "memo" )
    return "TEXT"
  else if ( type == "blob" )
    return "BYTEA"
  return "VARCHAR(" + (length != undefined && length > 0 ? length : 255) + ")"
}
/** Get the window time for the next execution of a recurring process.
  * 
  * @process name of the current process. If undefined, this method will 
  *          use the internal name of the workflow.
  * @return  an object with 3 properties:'start', 'end' and 'option'. 'start' 
  *          and 'end' properties are the string representation of the next 
  *          execution window of the process [start; end[. The start date 
  *          should be included in your query while the end should be excluded.
  *          'option' is the name of the option used to persist the last commited 
  *          window in database. */
Workflow.prototype.getNextExecutionWindow = function(process) {
  if ( process == undefined ) {
    // use the workflow name
    process = instance.internalName;
  }
  
  var optionName = process + "LastExecution";
  var window = { firstRun: false, option: optionName };
  var option = xtk.queryDef.create(
    <queryDef schema="xtk:option" operation="getIfExists">
      <select>
        <node expr="[@timeStampValue]" alias="@start"/>
        <node expr="getDate()" alias="@end"/>
      </select>
      <where>
        <condition expr= {"[@name]= "+ NL.XTK.toXTKString(optionName)}/>
      </where>
    </queryDef>).ExecuteQuery();
  if ( option.@start == undefined ) {
    logWarning(<log>Option '{optionName}' does exist. Using default start date.</log>.toString());
    window.firstRun = true;
    option = xtk.queryDef.create(
      <queryDef schema="xtk:option" operation="get">
        <select>
          <node expr="'1970/01/01 00:00:00'" alias="@start"/>
          <node expr="getDate()" alias="@end"/>
        </select>
        <where>
          <condition expr="@id=0"/>
        </where>
      </queryDef>).ExecuteQuery();
  }
  if ( (typeof vars) != "undefined" ) {
    // 
    // in a workflow, store the execution window end time for future use by 
    // commitExecutionWindow()
    // 
    vars[process + "ExecutionWindowStart"]  = option.@start.toString();
    vars[process + "ExecutionWindowEnd"]    = option.@end.toString();
  }
  
  window.start = option.@start.toString();
  window.end   = option.@end.toString();
  
  return window;
}
/** Commit a processing window initiated by a call to getNextExecutionWindow()
  * 
  * @process name of the current process. If undefined, this method will 
  *          use the internal name of the workflow. */
Workflow.prototype.commitExecutionWindow = function(log, process, window) {
  if ( process == undefined ) {
    // use the workflow name
    process = instance.internalName;
  }
  
  if ( window == undefined ) {
    window = { 
      start: vars[process + "ExecutionWindowStart"],
      end:   vars[process + "ExecutionWindowEnd"]
    }
  }
  
  var optionName = process + "LastExecution";
  xtk.session.Write(<option xtkschema="xtk:option" name={optionName} timeStampValue={window.end} dataType="7" _key="@name"/>);
  
  if ( log != undefined ) {
    logInfo("[" + window.start + ";" + window.end + "[ " + log);
  }
}
/* Search a field in a schema
 *
 * xpath   the xpath to the element or attribute to search (myelement or @myattribute)
 * parent  the node used to start the search.
 * return  the schema node. undefined if not found. */
function getSchemaNode(xpath, parent) {
  var found = undefined;
  
  for each(var node in parent.children)
  { 
    if ( node.name == xpath )
      return node;
      
    found = getSchemaNode(xpath, node);
    if ( found != undefined ) {
      break;
    }
  }
  
  return found;
}
/* Convert and Xtk expression to SQL
 *
 * expr   the expression to convert.
 * return the SQL code */
function xtkExprToSQL(schema, expr, tableAlias) {
  var m = expr.match(/\[*([@a-z0-9\-_\/]*)\]*/i);
  if ( m != null && 
     ( expr == m[1] || expr == "[" + m[1] + "]" ) && m[1].charAt(0).match(/\d/) == null ) {
    // the expression is a xpath
    var xpath = m[1];
    var xpathParts = xpath.split("/");
    var schemaNode = schema.root;
    for (var i=0; i < xpathParts.length && schemaNode != null; i++) {
      schemaNode = getSchemaNode(xpathParts[i], schemaNode);
      // logInfo("search " + xpathParts[i] + " -> " + schemaNode);
    }
    
    if ( schemaNode == null ) {
      logError("Unable to find the SQL field associated to the expression: " + expr + ". Failed to find path: " + xpathParts[i]);
    }
    
    if ( schemaNode.type == "string" ) {
      // insure a case insensitive comparison
      return "Upper(" + tableAlias + "." + schemaNode.SQLName + ")";
    }
    
    if ( tableAlias != undefined ) {
      return tableAlias + "." + schemaNode.SQLName;
    }
    
    return schemaNode.SQLName;
  }
  else {
    // using a queryDef to translate the xtk expression to SQL
    var query = xtk.queryDef.create(
      <queryDef schema={schema.namespace + ":" + schema.name} operation="select">
        <select>
          <node expr={expr}/>
        </select>
      </queryDef>
    );
    
    var sql = query.BuildQueryEx()[0];
    var m = sql.match(/SELECT (.*) FROM ([a-z0-9_]*) ([a-z0-9]{2})/i);
    
    return m[1].replace(new RegExp(m[3], "g"), tableAlias);
  }
  
  return null;
}
/** Wait until the given object is available for an exclusive access.
  * 
  * @objectName name of the object. Can be anything (table, schema, ...). 
  *             the name must not contains any special character except '_'.
  * This function is only usable in an advanced javascript activity and will 
  * suspend the activity for 30 secs if the object is not available. 
  * 
  * IMPORTANT: Before calling this function for the first time, you MUST create 
  * a text option in database with no value and the name of your object + 'Lock' 
  * as name (MyObject => MyObjectLock).
  * 
  * Two activities in the same workflow can acquire the exclusive access at 
  * the same time since the workflow engine can execute only one task at a time. */
function waitForExlusiveAccess(objectName) {
  var mutex = objectName + "Lock";
  var nUpdate = sqlExec("UPDATE XtkOption SET sStringValue=$(sz) WHERE sName=$(sz) AND (sStringValue IS NULL OR sStringValue=$(sz))", 
    instance.internalName, mutex, instance.internalName);
  if ( nUpdate === 0 ) {
    // retry in 30 sec
    task.setNextProcessingDate(new Date((new Date()).getTime() + 30*1000));
  }
  else {
    task.postEvent(task.transitionByName("continue"));
    task.setCompleted();
  }
      
  return 0
}
/** Release an exclusive access aquiried by calling waitForExlusiveAccess()
  * 
  * @objectName name of the object.
  * Throw an exception if the caller workflow is not the current owner of the
  * object. */ 
function releaseExclusiveAccess(objectName) {
  var mutex = objectName + "Lock";
  var nUpdate = sqlExec("UPDATE XtkOption SET sStringValue=NULL WHERE sName=$(sz) AND (sStringValue IS NULL OR sStringValue=$(sz))", 
    mutex, instance.internalName);
  if ( nUpdate === 0 ) {
    throw "Unable to release the option '" + mutex + "'";
  }
}]]></data>
    </javascript>
  </entities>
  <entities schema="xtk:sql">
    <sql entitySchema="xtk:sql" img="xtk:sql.png" label="postgresql-aggruvspace.sql"
         name="postgresql-aggruvspace.sql" namespace="acx">

      <data><![CDATA[DROP VIEW IF EXISTS aggruvspace;
 
CREATE  VIEW aggruvspace AS SELECT
  tablename,
  sum(size_mbytes) as sizeMB_all,
  (select sum(size_mbytes) from acxuvspace as uv2 where indexname is null and uv1.tablename = uv2.tablename) as sizeMB_data_only, 
  (select sum(size_mbytes) from acxuvspace as uv2 where indexname is not null and uv1.tablename = uv2.tablename) as sizeMB_idx_only,
  (select row_count from acxuvspace as uv2 where indexname is null and uv1.tablename = uv2.tablename) as rows from acxuvspace as uv1 where tablename not like 'wk%' and tablename not like 'pg_%' group by tablename;]]></data>
    </sql>
    <sql entitySchema="xtk:sql" img="xtk:sql.png" label="postgresql-pgbloat.sql"
         name="postgresql-pgbloat.sql" namespace="acx">

      <data><![CDATA[DROP VIEW IF EXISTS pgbloat;
 
CREATE  VIEW pgbloat AS SELECT
  current_database() AS database, schemaname, tablename,
  ROUND((CASE WHEN otta=0 THEN 0.0 ELSE sml.relpages::FLOAT/otta END)::NUMERIC,1) AS tbloat,
  CASE WHEN relpages < otta THEN 0 ELSE bs*(sml.relpages-otta)::BIGINT END AS wastedbytes,
  iname,
  ROUND((CASE WHEN iotta=0 OR ipages=0 THEN 0.0 ELSE ipages::FLOAT/iotta END)::NUMERIC,1) AS ibloat,
  CASE WHEN ipages < iotta THEN 0 ELSE bs*(ipages-iotta) END AS wastedibytes
FROM (
  SELECT
    schemaname, tablename, cc.reltuples, cc.relpages, bs,
    CEIL((cc.reltuples*((datahdr+ma-
      (CASE WHEN datahdr%ma=0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))/(bs-20::FLOAT)) AS otta,
    COALESCE(c2.relname,'?') AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages,
    COALESCE(CEIL((c2.reltuples*(datahdr-12))/(bs-20::FLOAT)),0) AS iotta -- very rough approximation, assumes all cols
  FROM (
    SELECT
      ma,bs,schemaname,tablename,
      (datawidth+(hdr+ma-(CASE WHEN hdr%ma=0 THEN ma ELSE hdr%ma END)))::NUMERIC AS datahdr,
      (maxfracsum*(nullhdr+ma-(CASE WHEN nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2
    FROM (
      SELECT
        schemaname, tablename, HDR, ma, bs,
        SUM((1-null_frac)*avg_width) AS datawidth,
        MAX(null_frac) AS maxfracsum,
        hdr+(
          SELECT 1+COUNT(*)/8
          FROM pg_stats s2
          WHERE null_frac<>0 AND s2.schemaname = s.schemaname AND s2.tablename = s.tablename
        ) AS nullhdr
      FROM pg_stats s, (
        SELECT
          (SELECT current_setting('block_size')::NUMERIC) AS bs,
          CASE WHEN SUBSTRING(v,12,3) IN ('8.0','8.1','8.2') THEN 27 ELSE 23 END AS HDR,
          CASE WHEN v ~ 'mingw32' THEN 8 ELSE 4 END AS ma
        FROM (SELECT version() AS v) AS foo
      ) AS constants
      WHERE s.schemaname = 'public'
      GROUP BY 1,2,3,4,5
    ) AS foo
  ) AS rs
  JOIN pg_class cc ON cc.relname = rs.tablename
  JOIN pg_namespace nn ON cc.relnamespace = nn.oid AND nn.nspname = rs.schemaname AND nn.nspname <> 'information_schema'
  LEFT JOIN pg_index i ON indrelid = cc.oid
  LEFT JOIN pg_class c2 ON c2.oid = i.indexrelid
) AS sml]]></data>
    </sql>
    <sql entitySchema="xtk:sql" img="xtk:sql.png" label="postgresql-pglocks.sql"
         name="postgresql-pglocks.sql" namespace="acx">

      <data><![CDATA[DROP VIEW IF EXISTS pglocks;
 
CREATE  VIEW pglocks AS SELECT
         bl.pid                 AS blocked_pid,
         a.usename              AS blocked_user,
         ka.query               AS blocking_statement,
         now() - ka.query_start AS blocking_duration,
         kl.pid                 AS blocking_pid,
         ka.usename             AS blocking_user,
         a.query                AS blocked_statement,
         now() - a.query_start  AS blocked_duration
  FROM  pg_catalog.pg_locks         bl
   JOIN pg_catalog.pg_stat_activity a  ON a.pid = bl.pid
   JOIN pg_catalog.pg_locks         kl ON kl.transactionid = bl.transactionid AND kl.pid != bl.pid
   JOIN pg_catalog.pg_stat_activity ka ON ka.pid = kl.pid
  WHERE NOT bl.GRANTED;]]></data>
    </sql>
    <sql entitySchema="xtk:sql" img="xtk:sql.png" label="postgresql-uvspace.sql"
         name="postgresql-uvspace.sql" namespace="acx">

      <data><![CDATA[DROP VIEW IF EXISTS aggruvspace;
DROP VIEW IF EXISTS acxuvspace;
CREATE VIEW acxuvspace AS 
SELECT c1.relname AS tablename, c2.relname AS indexname, ((c2.relpages * 8) / 1024)::bigint AS size_mbytes, c2.relfilenode AS filename, 0 AS row_count 
FROM pg_class c1, pg_class c2, pg_index i WHERE ((c1.oid = i.indrelid) AND (i.indexrelid = c2.oid)) 
UNION 
SELECT pg_class.relname AS tablename, NULL::unknown AS indexname, ((pg_class.relpages * 8) / 1024)::bigint AS size_mbytes, 
pg_class.relfilenode AS filename, (pg_class.reltuples)::bigint AS row_count 
FROM pg_class 
WHERE (pg_class.relkind = 'r'::"char") ORDER BY 3 DESC, 1, 2 DESC;]]></data>
    </sql>
    <sql entitySchema="xtk:sql" img="xtk:sql.png" label="sqlserver-uvspace.sql" name="sqlserver-uvspace.sql"
         namespace="acx">

      <data><![CDATA[DROP VIEW IF EXISTS acxuvspace;
 
CREATE  VIEW acxuvspace AS SELECT 
    t.NAME AS tablename,
  i.name as indexname,
  NULL as filename,
    NULL  AS size_mbytes,
  NULL AS row_count  
FROM 
    sys.tables t
INNER JOIN      
    sys.indexes i ON t.OBJECT_ID = i.object_id
INNER JOIN 
    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
INNER JOIN 
    sys.allocation_units a ON p.partition_id = a.container_id
LEFT OUTER JOIN 
    sys.schemas s ON t.schema_id = s.schema_id
WHERE 
    t.NAME NOT LIKE 'dt%' 
    AND t.is_ms_shipped = 0
    AND i.OBJECT_ID > 255 
GROUP BY 
    t.Name, 
  i.name,
  p.Rows
  UNION
  SELECT 
  t.NAME AS tablename,
  NULL as indexname,
  NULL as filename,
    CAST((SUM(a.used_pages) * 8 )/1024 as bigint)  AS size_mbytes,
  p.rows AS row_count  
FROM 
    sys.tables t
INNER JOIN      
    sys.indexes i ON t.OBJECT_ID = i.object_id
INNER JOIN 
    sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
INNER JOIN 
    sys.allocation_units a ON p.partition_id = a.container_id
LEFT OUTER JOIN 
    sys.schemas s ON t.schema_id = s.schema_id
WHERE 
    t.NAME NOT LIKE 'dt%' 
    AND t.is_ms_shipped = 0
    AND i.OBJECT_ID > 255 
GROUP BY 
    t.Name, 
  p.Rows
;]]></data>
    </sql>
  </entities>
  <entities schema="xtk:specFile">
    <specFile img="xtk:installedPackage.png" includeDefaultValues="false" includeInstallScript="false"
              includeSpec="true" label="Unofficial ACC - ACX Database Usage" name="acx-databaseusage" namespace="unofficialacc"
              type="0">
      <definition automaticDefinition="false" id="2619277316" lineCountMax="5000"
                  schema="xtk:option">
        <where displayFilter="internal name contains 'acx'">
          <condition compositeKey="" dependkey="" enabledIf="" expr="@name LIKE '%' + 'acx' + '%'"
                     internalId="2619473925"/>
        </where>
      </definition>
      <definition automaticDefinition="false" id="2621767687" lineCountMax="5000"
                  schema="xtk:jssp">
        <where displayFilter="namespace equal to 'acx'">
          <condition compositeKey="" dependkey="" enabledIf="" expr="@namespace = 'acx'"
                     internalId="2622029832"/>
        </where>
      </definition>
      <definition automaticDefinition="false" id="2623078416" lineCountMax="5000"
                  schema="xtk:javascript">
        <where displayFilter="namespace equal to 'acx'">
          <condition compositeKey="" dependkey="" enabledIf="" expr="@namespace = 'acx'"
                     internalId="2623275025"/>
        </where>
      </definition>
      <definition automaticDefinition="false" id="2624978963" lineCountMax="5000"
                  schema="xtk:sql">
        <where displayFilter="namespace equal to 'acx'">
          <condition compositeKey="" dependkey="" enabledIf="" expr="@namespace = 'acx'"
                     internalId="2625306644"/>
        </where>
      </definition>
      <properties>
        <progress current="0" max="0"/>
      </properties>
    </specFile>
  </entities>
</package>
